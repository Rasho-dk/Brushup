namespace Brushup
{
    public class Teacher : Person , ITeacher
    {
        public int Salary { get; set; }
        public List<string> Classes { get; set; }

      
        public void ValidateClasses()
        {
            if (Classes is null)
            {
                throw new ArgumentException("Classes is cant be null" + Classes);

            }
        }
        public void ValidateSalary()
        {
            if (Salary <= 0)
            {
                throw new ArgumentException("Salary is negative" + Salary);
            }
        }
        //Når man laver en override metode, så skal man skrive override foran da vi overrider en metode fra en base class

        public override void Validate()
        {
            ValidateName();
            ValidateGender();
            ValidateSalary();
        }

        public override string ToString()
        {
            string classes = null;
            //Vi laver en foreach loop, som kører igennem vores liste af klasser
            foreach (string c in Classes)
            {
                  classes += c + ",";
            }
            //Fjerner det sidste komma
            classes = classes.Remove(classes.Length - 1);

            //base.ToString() er en metode fra vores base class, som vi kan bruge i vores subklasser
            return $"{{{base.ToString()}, {nameof(Classes)}={classes}, {nameof(Salary)}={Salary.ToString()}}}";

        }
        //Equals metoden er en override metode, som vi har lavet om, så den passer til vores Teacher klasse
        //Den bruger base.Equals(obj) til at tjekke om obj er en Person, og derefter tjekker den om alle properties er ens
        //Vi bruger EqualityComparer til at tjekke om vores liste af klasser er ens
        //Vi bruger HashCode.Combine til at lave en hashcode ud fra alle vores properties
        public override bool Equals(object? obj)
        {

            return obj is Teacher teacher &&
                   base.Equals(obj) &&
                   Salary == teacher.Salary &&
                   //EqualityComparer<List<string>>.Default.Equals(Classes, teacher.Classes); // OBS: Deb autogeneratede kode virker ikke når jeg lave unit test.

                   //Vi bruger SequenceEqual til at tjekke om vores liste af klasser er ens
                   //SequenceEqual "compares two sequences for equality". 
                   Classes.SequenceEqual(teacher.Classes);

        }

        public override int GetHashCode()
        {
           string classes = null;
            foreach (string c in Classes)
            {
                classes += c + ",";
            }
            classes = classes.Remove(classes.Length - 1);

            return HashCode.Combine(base.GetHashCode(), Salary, classes);
        }
    }
}